@page "/signalr"
@using web.Data
@using System.Text.Json
@using web.Services
@inject IBroadcastService _broadcastService
@inject IJSRuntime _jsRuntime;

<PageTitle>Signal R</PageTitle>

<MatH3>Signal R</MatH3>
<MatH6>Connected as @_userName</MatH6>

<div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 800px;">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatButton Raised="true" OnClick="SendNewMessage">Send A New Message</MatButton>
        </div>
    </div>
    <br/>
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatButton Raised="true" OnClick="SendNewFilteredMessage">Send A Filtered Message</MatButton>
        </div>
    </div>
    <br/>
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell">
            <MatChipSet Filter="true" @bind-SelectedChips="_selectedGroups">
                @foreach (var group in Users.Groups)
                {
                    <MatChip Label="@group" IsCheckable="true"></MatChip>
                }
            </MatChipSet>
        </div>
        <div class="mat-layout-grid-cell">
            <MatButton Raised="true" OnClick="SendGroupMessage">Send A Group Message</MatButton>
        </div>
    </div>
</div>

<ul class="mdc-list" style="" aria-orientation="vertical" id="messageEvents">

</ul>

@code {

    private Task SendNewMessage()
    {
        var payload = new Message
        {
            Date = DateTimeOffset.UtcNow,
            Text = $"Hello from {_userName} {Guid.NewGuid()}"
        };

        return _broadcastService.BroadcastAsync("broadcastMessage", payload, default);
    }

    private async Task SendGroupMessage()
    {
        if (_selectedGroups is null)
        {
            return;
        }

        var payload = new Message
        {
            Date = DateTimeOffset.UtcNow,
            Text = $"Hello from {_userName} {Guid.NewGuid()}"
        };

        foreach (var group in _selectedGroups)
        {
            await _broadcastService.BroadcastAsync(group.Label, "broadcastMessage", payload, default);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await _jsRuntime.InvokeAsync<JsonElement>("window.signalrPlayGroundContext");
            _userName = result.GetProperty("userName").GetString();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private string? _userName;
    private MatChip[]? _selectedGroups;

    private async Task SendNewFilteredMessage()
    {
        var payload = new Message
        {
            Date = DateTimeOffset.UtcNow,
            Text = $"Hello from {_userName} a filtered message {Guid.NewGuid()}"
        };

        await _broadcastService.BroadcastAsync("broadcastMessage", payload, x => !x.UserName.Contains("Homer"), default);
    }

}