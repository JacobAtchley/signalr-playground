@using Microsoft.AspNetCore.Components.Web
@namespace web.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <script src="_content/MatBlazor/dist/matBlazor.js"></script>
    <link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="web.styles.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@3.1.8/dist/browser/signalr.min.js"></script>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />

  <script>
    function logEvent(primary, secondary){
        const events = document.getElementById('messageEvents');

        if (!events)
        {
            return;
        }

       const message = `<li class=" mdc-list-item mdc-ripple-upgraded">
                             <span class=" mdc-list-item__text" style="">
                                 <span class=" mdc-list-item__primary-text" style="">${primary}</span>
                                 <span class=" mdc-list-item__secondary-text" style="">${secondary}</span>
                             </span>
                         </li>
                         <br>
                         <li role="separator" class=" mdc-list-divider" style=""></li>`;
                         
        events.insertAdjacentHTML('beforeend', message);

        window.scrollTo(0, document.body.scrollHeight);
    }

    function initSignalR(){
        fetch('/api/username')
            .then(res => res.text())
            .then(userName => {
                const group = userName.split('_')[0];
                window.signalrPlayGroundContext = () =>({
                    group,
                    userName,
                });

                const connectionBuilder = new signalR
                    .HubConnectionBuilder()
                    .withUrl(`/chat?userName=${userName}&group=${group}`)
                    .withAutomaticReconnect([1000, 5000, 30000, 60000, null]); //wait 1s, then 5s, then 30s, then 60s, then give up 

                const connection = connectionBuilder.build();

                connection.on('broadcastMessage', payload => {
                    logEvent(payload.text, payload.date);
                });

                connection.on('personEvent', payload => {
                    logEvent(`Person Event`, `${payload.after.firstName} ${payload.after.lastName} - ${payload.trigger}`);
                });

                connection.start();
        });
    }

    initSignalR();
  </script>
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
</body>
</html>